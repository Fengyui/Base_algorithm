# 回溯法求解多旅行商问题
import math
import time

start_time = time.time()
def tsp_train(cost, n, s, list ,xm, xn):
    global nowcost, bestcost#设置全局变量
    #递归出口
    if(s == n):##在这里设置两个旅行商的分配问题，对叶子节点进行划分即可,出来5个点
        #print(x)
        #print(bestcost)
        for i in range(1,n):#可以选取1,2,3,4
            #i=1
            x1 = [0]
            x2 = [0]  
            fcost = 0
            scost = 0
            for k in range(1,i+1):
                fcost = fcost + cost[x[k-1]][x[k]]#第一个旅行商
                x1.append(x[k])
        
            for j in range(i+1,n):
                m = j-i-1
                if m == 0:
                    scost = cost[x[0]][x[j]]
                else:
                    scost = scost + cost[x[j-1]][x[j]]#第二个旅行商的花费
                x2.append(x[j])
                

            fcost = fcost + cost[x[i]][x[0]]
            if i < n-1:
                scost = scost + cost[x[n-1]][x[0]]
            else:
                scost = 0
            
            nowcostij = fcost + scost
            list.append(nowcostij)
            xm.append(x1)
            xn.append(x2)    
            
    else:
        for i in range(s, n): 
            x[i], x[s] = x[s], x[i]    # 交换
            # 如果下一节点能够通过,则递归调用
            if (cost[x[i-1]][x[i]] != math.inf):     
                nowcost += cost[x[s - 1]][x[s]]    # 将花费加入
                tsp_train(cost, n, s+1,list,xm,xn)
                nowcost -= cost[x[s-1]][x[s]]    # 回溯上去还需要减去花费
            x[i], x[s] = x[s], x[i]    # 再交换回来    
            
    
if __name__ == "__main__":
    n = 5
    x = [0,1,2,3,4]
    #设置两个旅行商
    traveler = 2
    
cost = [
    [0, 8, 6, 7, 2],
    [80, 0, 3, 1, 5],
    [4, 9, 0 , 5, 8],
    [20, 6, 2, 0, 10],
    [10, 5, 7, 24, math.inf]
]     
    
bestway = ''
bestcost = math.inf #设置初始距离为无穷大
nowcost = 0    # 全局变量，现在的花费

list = []
xm = []
xn = []
tsp_train(cost, n, 1, list,xm, xn)

bestcostij = list[0] 
k = 0 
for i in list:
    k+=1
    if bestcostij > i:
        bestcostij = i
        xmway = xm[k-1]
        xnway = xn[k-1]
        
print(bestcostij)
print(xmway)
print(xnway)

end_time = time.time()
print("所需的总时间为："+str(end_time-start_time))

